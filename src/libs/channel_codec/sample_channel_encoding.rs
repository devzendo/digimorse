use crate::libs::channel_codec::channel_encoding::{ChannelEncoding, ChannelSymbol};

pub fn sample_channel_encoding() -> ChannelEncoding {
    ChannelEncoding { block: vec![
        ChannelSymbol::RampUp,
        ChannelSymbol::Tone { value: 1 },
        ChannelSymbol::Tone { value: 1 },
        ChannelSymbol::Tone { value: 4 },
        ChannelSymbol::Tone { value: 5 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 3 },
        ChannelSymbol::Tone { value: 12 },
        ChannelSymbol::Tone { value: 8 },
        ChannelSymbol::Tone { value: 13 },
        ChannelSymbol::Tone { value: 14 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 14 },
        ChannelSymbol::Tone { value: 9 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 3 },
        ChannelSymbol::Tone { value: 8 },
        ChannelSymbol::Tone { value: 15 },
        ChannelSymbol::Tone { value: 1 },
        ChannelSymbol::Tone { value: 2 },
        ChannelSymbol::Tone { value: 11 },
        ChannelSymbol::Tone { value: 13 },
        ChannelSymbol::Tone { value: 11 },
        ChannelSymbol::Tone { value: 4 },
        ChannelSymbol::Tone { value: 10 },
        ChannelSymbol::Tone { value: 3 },
        ChannelSymbol::Tone { value: 4 },
        ChannelSymbol::Tone { value: 10 },
        ChannelSymbol::Tone { value: 10 },
        ChannelSymbol::Tone { value: 9 },
        ChannelSymbol::Tone { value: 6 },
        ChannelSymbol::Tone { value: 7 },
        ChannelSymbol::Tone { value: 8 },
        ChannelSymbol::Tone { value: 10 },
        ChannelSymbol::Tone { value: 9 },
        ChannelSymbol::Tone { value: 1 },
        ChannelSymbol::Tone { value: 13 },
        ChannelSymbol::Tone { value: 14 },
        ChannelSymbol::Tone { value: 5 },
        ChannelSymbol::Tone { value: 2 },
        ChannelSymbol::Tone { value: 3 },
        ChannelSymbol::Tone { value: 1 },
        ChannelSymbol::Tone { value: 5 },
        ChannelSymbol::Tone { value: 8 },
        ChannelSymbol::Tone { value: 5 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 0 },
        ChannelSymbol::Tone { value: 10 },
        ChannelSymbol::Tone { value: 9 },
        ChannelSymbol::Tone { value: 2 },
        ChannelSymbol::Tone { value: 3 },
        ChannelSymbol::RampDown
    ], is_end: true }
}
